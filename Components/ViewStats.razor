@inject NavigationManager navigationManager
@inject ViewService viewService

<div class="stats stashadow border-1 py-1 bg-base-300 border-none items-center">
    @for (int i = 0; i < 3; ++i)
    {
        <div class="stat px-4 py-0">
            <div class="stat-title">@names[i]</div>
            <div class="stat-value text-2xl">
                <span class="@(totalValues[i] == null ? " text-error" : "")">
                    @FormatNumber(totalValues[i])
                </span>
            </div>
            <div class=" stat-desc">
                本月:
                <span class="@("font-semibold " + (monthlyValues[i] == null ? " text-error" : ""))">
                    @FormatNumber(monthlyValues[i])
                </span>
                @if (newVisit[i])
                {
                    <span class="text-success font-semibold">
                        (+1⬆)
                    </span>
                }
            </div>
        </div>
    }
</div>

@code {
    string[] names = ["本页访问量", "本站访问量", "本站访客数"];
    int?[] totalValues = [null, null, null];
    int?[] monthlyValues = [null, null, null];
    bool[] newVisit = [false, false, false];

    string FormatNumber(int? number) => number switch
    {
        null => "--",
        (< 1000) => $"{number}",
        (< 10_000) => $"{number / 1000.0: 0.##}K",
        (< 100_000) => $"{number / 1000.0: 0.#}K",
        (< 1_000_000) => $"{number / 1000.0: 0}K",
        (< 10_000_000) => $"{number / 1_000_000.0: 0.##}M",
        (< 100_000_000) => $"{number / 1_000_000.0: 0.#}M",
        (< 1_000_000_000) => $"{number / 1_000_000.0: 0}M",
        _ => "1B+"
    };

    protected override async Task OnInitializedAsync()
    {
        navigationManager.LocationChanged += async (sender, args) => await LocationChangedAsync();
        await LocationChangedAsync();
    }

    private async Task LocationChangedAsync()
    {
        totalValues = [null, null, null];
        monthlyValues = [null, null, null];
        newVisit = [false, false, false];
        StateHasChanged();
        ViewStatsDto? viewStats = await viewService.PutViewStatsAsync();
        if (viewStats != null)
        {
            totalValues = [viewStats.TotalPageViews, viewStats.TotalWebsiteViews, viewStats.TotalUniqueVisitors];
            monthlyValues = [viewStats.MonthlyPageViews, viewStats.MonthlyWebsiteViews, viewStats.MonthlyUniqueVisitors];
            newVisit = [viewStats.IsNewView, viewStats.IsNewView, viewStats.IsNewVisitor];
            StateHasChanged();
        }
    }
}